Day-25 session-25(13/09/2024)
-----------------------------
Recap:
-------
variables
conditions 
count based 
functions 
outputs 
data source 
tfvars 
tags 
advantages 

Now in today's class
--------------------

requirements for Use case  
1. 3 ec2 instances 
2. 3 r53 records 
mysql.daws81s.fun --> t3.small
backend.daws81s.fun --> t3.micro 
daws81s.fun --> t3.micro 

r53 
-----

we should get the output of ec2 instance created 
aws_instance.terraform


for example:
-----------
we have, backend.daws81s.fun 
var.instance_names = backend 
domain_name = daws81s.fun 
combining these are called as interpolation or concatenation

"${var.instance_names[count.index]}.${var.domain_name}"

terraform fmt --> it beautifies the terraform files 

locals:
-------
locals are like variables but it have extra capabilities. You can store expressions and intermediate values in locals 

variables can be overriden but we can't override locals 

variables vs locals:
--------------------

1. variables and locals both can store values, but locals have some extra capabilities
2. locals can store expressions, terraform can run them and get the value 
3. locals can use variables inside, variables can't refer locals 
4. can override variables, can't override locals 

state, remote state and locking 
---------------------------------
The main difference between ansible and terraform 
----------------------

It is a simple name update, but ansible created another instance. Becoz of state, ansible created another instance rather than updating an existing instance 
for example;
------------
If you have given an assignment --> proof - will check your notes and confirm whether you completed or not 

declared infrastruture , actual infrastruture

terraform == declarative way of creating infra 
declarative = whatever we have declared that has to given by the terraform 

tf files == infra I declared 
aws infra == actual infra created 
if everything is going right, then the declared infra == actual infra 
-> The main responsibility of terraform is whatever we have declared that has to take care of
terraform.tfstate == terraform keeps track of what it created 

aws_security_group.allow_ssh_terraform: Refreshing state.... 


before I delete:
----------------
declared infra == actual infra --> true 

After I delete:
---------------
declared infra == actual infra --> false 

terraform.tfstate --> instance created 
real infra --> no, actually destroyed 
config files --> create the infra 

terraform.tfstate will be refreshed against real infra 

remote state:
----------------

for example:
-------------
-> If we have a three laptops using three different perosn and in between we have a centrol repo or remote repo called github 

I am creating infra from my laptop --> it will create infra 
Another person also tries to create --> it will also create infra again 

here the problem is, we will get a duplicates or errors 
so, solution for this is, we have to keep the state file into remote 
-> somewhere it is in remote state rather than in our laptops 
while executing, it checks with the remote state
and whatever we created  with AWS that we can find in remote state 
The usage is, while creating by the second person, state says that don't create locally do compare with remote state  and it says, it already applied 

what is remote state? -- imp for interviews 
---------------------------------------------
while working in a collboration environment, if you don't maintain the state remotely then there is a chance of creating duplicates and errors. so we keep the state in remote location then terraform can effectively compare 

Remote state:
------------
By default, terraform stores state locally in a file named terraform.tfstate. when working terraform in a team, use of a local file makes terraform usage complicated because each user must make sure they always have the state data running terraform and make sure that nobody else runs terraform at the same time 

with remote state, terraform writes the state data to a remore data store, which can then be shared between all members of a team. terraform supports storing state in HCP terraform hasicorp consul, Amazon s3, azure blob storage, google cloud storeage,Alibaba cloud OSS 

why locking is important?
--------------------------
what if two alternate persons creates the infrastructure, then again we face the same problem, we can get duplicates and errors 
-> so, becoz of this, terraform creates .lock file. we may see the .lock file while creating important files 
.lock --> programs will check if any .lock file is there,if it is there and it will not allow others to edit 
-> while running it will not open the .lock file 
and terraform automatically locks the file 
-> It is locally, so it is using .lock file 
-> But in remote, it should have locking mechanism. so, coming to AWS we use dynamo DB 

Locking:
----------
for fully-featured remote backend, terraform can also use state locking to prevent concurrent runs of terraform against the same state 
for remote storage --> s3 storage 
for locking --> dynamo DB 

By using these two we can acheive the entire use case 

open Dynamo DB in AWS -> go to tables -> create table -> name it as 81s-locking -> partition key must be always LockID -> just click on create table 

open S3 bucket -> create bucket -> name it as 81s-remote-state -> just click on create bucket 


