Day-29 session-29(23/09/2024)
-----------------------------

Terraform overview:
-------------------
-> terraform is an IaC(Infrastructure as Code) tool 
-> It is infrastructure as a code becoz it is, Automate, reuse, version controlling 
-> Hashicorp introduced terraform, HCL(Harshicorp language)
-> HCL language is a Declarative 

what is declarative ? 
-> whatever we give, it will create 

concepts in terraform:
----------------------
- resources
- provider 
- provisioners 
- functions 
- variables 
- local-exec
- remote-exec 
- data sources 
- state and remote state 
- locking 
- modules 
- loops 
- workspaces 
- tfvars 
- conditions 
- locals

what is the difference between normal variable declaration and locals? 
A) we can write expressions and evaluate them using locals 

Can you use count-based loop inside locals?
A) No 

terraform commands:
--------------------
- terraform init: Initializes a Terraform project
  1. -reconfigure 
terraform init -reconfigure- Terraform to reinitialize everything from scratch, including reconfiguring the backend without using any previous settings.

  2. -backend-config 
terraform init -backend-config- command is used to provide a custom backend configuration during the initialization process in Terraform. It allows you to specify backend settings

  3. -upgrade 
terraform init -upgrade- It is usually used to upgrade the latest version of the module source code.
  
- terraform validate: Validates the configuration files, checking for syntax errors and ensuring that they are syntactically correct.

- terraform plan: Creates an execution plan 
  1. -var-file 
terraform plan -var-file- command is used to pass a file containing input variable values to the terraform plan command
  
- terraform apply: Applies the changes required to reach the desired state of the configuration

- terraform fmt: Formats Terraform configuration files according to a canonical standard, ensuring code is clean and easy to read. 

- terraform destroy: Removes all resources defined in the configuration

terraform state show 

- terrafprm state list: It doesn't shows the list of workspaces rather it shows only the list of resources which terraform had created at that moment of time 

-> terraform plan -var-file=dev/dev.tfvars -out dev.tfplan  ==> -out is used to store the planned infra 

- terraform show: Displays the current state or details of a specific plan or state file.

- terraform state: Manages Terraform's state file, allowing you to inspect, manipulate, and fix issues in the state manually.

- terraform workspace: Manages multiple Terraform workspaces (isolated state environments), allowing for different environments.

- terraform output: displays the output values defined in your configuration after an apply 

-> terraform import: Imports existing infrastructure into Terraform state, allowing you to manage resources that were not originally created by Terraform.

- terraform taint: Marks a resource as tainted, forcing it to be destroyed and recreated on the next apply.
-> using this command, you could taint a terraform resource 



what is terraform -upgrade?
-> It is usually used to upgrade the latest version of the modules source code 
-> you should never give the hard code versions. Give like this, version = "~>5.0"

eg: terraform init -upgrade

what is terraform validate? - imp for interviews
-> It shows that, success! the configuration is valid 
-> It performs syntax check and validates the code 
-> Validates the configuration files, checking for syntax errors and ensuring that they are syntactically correct.

what is terraform fmt?
-> adjusts and beautifies the code 

-> terraform state list 


Modules:
--------
- root module: terraform-aws-ec2
This is the main working directory where you run Terraform commands. It can include other modules.
- child: ec2-module-demo
A reusable, independently defined module that can be called by the root module or other modules. 

terraform state: - imp for interviews
--------------------------------------
- Desired state: what you desire 
-> The desired state is what you want your infrastructure to look like. It's defined in your Terraform configuration files.
where you specify things like which servers, databases, and networks you want to create and how you want them configured. Essentially, it's your blueprint for your infrastructure. 

- Current state: what is your current infra that terraform is managing 
-> The current state is the actual setup of your infrastructure at any given moment. It reflects what resources are currently deployed and their configurations.

what is terraform import?
A) Terraform import is a command that allows you to bring existing infrastructure into Terraform's management.
we can use the import command to link those resources to your Terraform configuration.

what is the difference between normal variables declaration and locals?

-> Normal variables They are used to accept input values when you run your Terraform configurations. You can pass different values each time you apply the configuration.

-> Locals They are used to define reusable values or expressions that you want to use within your configuration. Locals can help simplify complex expressions and make your code cleaner.

How to handle a situation when a state file is deleted or corrupted?
A) We need to import the resources that are part of the terraform code into its state file and we do it using: terraform import 


additional:
------------
bash clone-all-repos.sh daws-81s 

cd daws-81s 
 
code . 

terraform import aws_instance.web <instance_id>
terraform show -> will get all the details 
terraform state list 

